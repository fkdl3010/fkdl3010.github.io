<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://fkdl3010.github.io/</id><title>GIL</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-12-28T02:05:33+09:00</updated> <author> <name>Park-Sang-gil</name> <uri>https://fkdl3010.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://fkdl3010.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://fkdl3010.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Park-Sang-gil </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>동시성 제어</title><link href="https://fkdl3010.github.io/posts/%EB%B3%91%ED%96%89%EC%A0%9C%EC%96%B4/" rel="alternate" type="text/html" title="동시성 제어" /><published>2021-12-27T00:00:00+09:00</published> <updated>2021-12-28T02:05:12+09:00</updated> <id>https://fkdl3010.github.io/posts/%EB%B3%91%ED%96%89%EC%A0%9C%EC%96%B4/</id> <content src="https://fkdl3010.github.io/posts/%EB%B3%91%ED%96%89%EC%A0%9C%EC%96%B4/" /> <author> <name>Park-Sang-gil</name> </author> <category term="DataBase" /> <summary> 동시성 제어(concurrency control)란? 다중 사용자 환경을 지원하는 데이터베이스 시스템에서 여러 트랜잭션들이 성공적으로 동시에 실행 될 수 있도록 지원하는 기능입니다. 이를 동시성제어 또는 병행제어 라고도 합니다. 동시성 제어의 필요성 트랜잭션이 순차적으로, 즉 시간이 겹치지 않고 순차적으로 실행된다면 동시성이 존재하지 않습니다. 하지만 다수의 사용자가 접근하는 DB의 경우 여러 트랜잭션이 하나의 데이터를 삽입, 갱신, 삭제 등의 작업을 동시에 수행하게 될 때 동시성 제어가 적절하게 설계되어있지 않다면 예기치 못한 문제점들이 발생할 수 있습니다. 동시성 제어를 하지 않는 경우 문제점 I. Dirty Write 갱신 분실(Lost Update)이라고도 합니다. ... </summary> </entry> <entry><title>Transcation이란?</title><link href="https://fkdl3010.github.io/posts/transaction/" rel="alternate" type="text/html" title="Transcation이란?" /><published>2021-12-22T00:00:00+09:00</published> <updated>2021-12-23T00:19:12+09:00</updated> <id>https://fkdl3010.github.io/posts/transaction/</id> <content src="https://fkdl3010.github.io/posts/transaction/" /> <author> <name>Park-Sang-gil</name> </author> <category term="DataBase" /> <summary> 트랜잭션이란? 완결성 있게 처리되어야 하는 하나의 논리적인 작업단위를 말합니다. 이 논리적 작업 단위 내에는 여러동작 ( 질의, query ) 들이 존재하며 이들은 모두 실행되거나 모두 실행되지 않아야 합니다. 만약 작업단위가 중간에 실행이 중단 됐을 경우, 처음부터 다시 실행하는 rollback을 수행하고, 성공한다면 commit 하여 현재 데이터를 확정짓습니다. 즉, 한번 질의가 실행되면 질의가 모두 수행되거나 모두 수행되지 않는 작업수행의 논리적 단위 입니다. 특성 트랜잭션은 아래와 같은 4가지 특성이 있습니다. 4가지 특성의 앞 글자만 따서 ACID 특성이라 칭합니다. 원자성 ( Atomicity ) 트랜잭션의 작업이 부분적으로 실행되거나 중단되지 않는... </summary> </entry> <entry><title>(MyBatis) Mapper등록</title><link href="https://fkdl3010.github.io/posts/injectMapper/" rel="alternate" type="text/html" title="(MyBatis) Mapper등록" /><published>2021-12-17T00:00:00+09:00</published> <updated>2021-12-17T01:50:33+09:00</updated> <id>https://fkdl3010.github.io/posts/injectMapper/</id> <content src="https://fkdl3010.github.io/posts/injectMapper/" /> <author> <name>Park-Sang-gil</name> </author> <category term="Java" /> <category term="MyBatis" /> <summary> mybatis-spring 프레임워크를 사용할 때 mapper를 springContext에 주입하는 방법으로 크게 2가지가 있습니다 Mapper 수동 등록 Mapper 스캔을 이용한 자동 등록 두가지 방법을 알아보겠습니다. 목차 Mapper 수동 등록하기 XML설정 사용 Mapper 스캔 I. mybatis:scan 엘리먼트 사용 base-package annotation marker-interface II. 스프링 XML파일을 사용해서 MapperScannerConfigurer를 등록 Ma... </summary> </entry> <entry><title>Optional</title><link href="https://fkdl3010.github.io/posts/optional/" rel="alternate" type="text/html" title="Optional" /><published>2021-11-29T02:00:00+09:00</published> <updated>2021-12-17T00:54:08+09:00</updated> <id>https://fkdl3010.github.io/posts/optional/</id> <content src="https://fkdl3010.github.io/posts/optional/" /> <author> <name>Park-Sang-gil</name> </author> <category term="Java" /> <summary> Optional Optional는 “존재할 수도 있지만 안 할 수도 있는 객체”, 즉, “null이 될 수도 있는 객체”을 감싸고 있는 일종의 래퍼 클래스입니다. 원소가 없거나 최대 하나 밖에 없는 Collection이나 Stream으로 생각하셔도 좋습니다. 직접 다루기에 위험하고 까다로운 null을 담을 수 있는 특수한 그릇으로 생각하시면 이해가 쉬우실 것 같습니다. Optional 기본 사용법 1. Optional 변수 선언하기 제네릭을 제공하기 때문에, 변수를 선언할 때 명기한 타입 파라미터에 따라서 감쌀 수 있는 객체의 타입이 결정됩니다. Optional&amp;lt;Order&amp;gt; maybeOrder; // Order 타입의 객체를 감쌀 수 있는 Optional 타입의 변수 Opti... </summary> </entry> <entry><title>doRealMethod</title><link href="https://fkdl3010.github.io/posts/doRealMethod/" rel="alternate" type="text/html" title="doRealMethod" /><published>2021-08-27T02:00:00+09:00</published> <updated>2021-11-29T22:52:11+09:00</updated> <id>https://fkdl3010.github.io/posts/doRealMethod/</id> <content src="https://fkdl3010.github.io/posts/doRealMethod/" /> <author> <name>Park-Sang-gil</name> </author> <category term="Java" /> <category term="Junit" /> <summary> Mockito 프레임워크가 제공하는 Stub 기반의 테스트 방법 중 doRealMethod() 를 알아보겠습니다. doRealMethod() 란? Mock 실행 객체 참조를 사용하여 메서드를 참조할 때 java는 해당 메서드에 대한 호출을 전혀 하지 않으며, 지정된 값이 없으면 모의 실행 값을 반환하거나 null을 찾습니다. 하지만 만약 우리가 그것을 재정의하고 java가 모의 객체 참조를 사용하여 실제 메소드를 호출하기를 원한다면, 이 메소드를 사용할 수 있습니다. 출처: https://javasearch.buggybread.com/InterviewQuestions/questionSearch.php?searchOption=question&amp;amp;keyword=3813 테스트 ... </summary> </entry> </feed>
